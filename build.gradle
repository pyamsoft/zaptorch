/*
 * Copyright 2019 Peter Kenji Yamanaka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.


buildscript {
    ext {
        kotlin_version = '1.3.61'
    }
    repositories {
        google()
        mavenCentral()
        jcenter()
        mavenLocal()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    ext {

        minSdk = 23
        maxSdk = 29

        // AndroidX
        preference = "1.1.0"

        pydroid = "20.8.0-SNAPSHOT"
        leakCanary = "2.1"
        dagger = "2.25.4"
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.2'

        // Dex count
        classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.6'

        // Gradle version checker
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.22.0'

        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

        // Spotless
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.27.0"
    }
}

subprojects {
    apply plugin: "com.github.ben-manes.versions"

    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject('Release candidate')
                }
            }
        }
    }

    apply plugin: "com.diffplug.gradle.spotless"

    spotless {
        java {
            target "**/*.java"
        }
        kotlin {
            target "**/*.kt"
            ktlint()
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter()
        mavenLocal()

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
        options.deprecation = true
    }

    afterEvaluate {
        extensions.findByName('kapt')?.arguments {
            arg("dagger.formatGeneratedSource", "disabled")
            arg("dagger.gradle.incremental", "enabled")
        }
    }
}
