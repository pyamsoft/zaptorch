/*
 * Copyright 2019 Peter Kenji Yamanaka
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
  ext {
    kotlin_version = '1.3.21'
  }
  repositories {
    google()
    mavenCentral()
    jcenter()
    mavenLocal()
  }

  ext {

    minSdk = 23
    maxSdk = 28

    // AndroidX
    annotation = "1.0.1"
    preference = "1.0.0"
    recyclerView = "1.0.0"

    pydroid = "19.0.2"
    leakCanary = "1.6.3"
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:3.3.1'

    // Dex count
    classpath 'com.getkeepsafe.dexcount:dexcount-gradle-plugin:0.8.6'

    // Gradle version checker
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'

    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

subprojects {
  apply plugin: "com.github.ben-manes.versions"

  dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
      rules.all { ComponentSelection selection ->
        boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview'].any { qualifier ->
          selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
        }
        if (rejected) {
          selection.reject('Release candidate')
        }
      }
    }
  }
}

allprojects {
  repositories {
    google()
    mavenCentral()
    jcenter()
    mavenLocal()
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    options.deprecation = true
  }
}

task clean(type: Delete) {
  delete rootProject.buildDir
}
